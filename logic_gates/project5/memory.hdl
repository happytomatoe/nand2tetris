// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/Memory.hdl
/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load=1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid and reads 0. Access to any address
 * in the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the Screen
 * and Keyboard chip specifications given in the lectures and the book.
 */
CHIP Memory {

    //2^15=32768
    //if address>=24577(110000000000001) out=0
    //though out is already 0
    //screen = 2^14(100000000000000)=16384
    //110000000000000=24576

    IN in[16], load, address[15];
    //address 
    // if 1 bit is 0 - main memory
    //screen = 16384-24575
    // 100000000000000 - 101111111111111
    // if 10 - screen memory
    //0110000000000000 - keyboard
    OUT out[16];

    PARTS:
    Not16(in= in, out=notIn );
    And16(a= in, b=notIn , out=zero );
    //divide load into 4k adresses
    DMux8Way(in=load, sel=address[12..14],a=loadMainMemory4k,b=loadMainMemory4to8k,     c=loadMainMemory8to12k,d= loadMainMemory12to16k,    e=loadScreenMemory4k, f=loadScreenMemory4to8k,     g=outOfRange1, h=outOfRange2);    
    //Main memory
    Or(a= loadMainMemory4k, b=loadMainMemory4to8k , 
    out= loadMainMemory1);
    Or(a= loadMainMemory8to12k, b=loadMainMemory12to16k , 
    out= loadMainMemory2);
    Or(a= loadMainMemory1, b=loadMainMemory2,
     out= loadMainMemory);
    
    //Main memory
    RAM16K(in=in, load=loadMainMemory, 
    address=address[0..13], out=mainMemoryOut);
    //S
    RAM4K(in=in, load=loadScreenMemory4k,
     address=address[0..11],
     out= screenMemoryOut1);
    RAM4K(in=in, load=loadScreenMemory4to8k,
     address=address[0..11], out=screenMemoryOut2);
    
    //Keyboard
    //110000000000000 - keyboard address
    Keyboard(out=keybordOut);
    //check if all symbols are 0 after 11
    Or8Way(in= address[0..7], out=t1);
    Or8Way(in= address[5..12], out= t2);
    Or(a= t1, b= t2, out=last13AddressSymbolsHave1);
    Not(in=last13AddressSymbolsHave1 ,
     out=last13AddressSymbolsAre0s);
    Mux16(a= zero, b= keybordOut, 
    sel=last13AddressSymbolsAre0s, out=keyboardFinalOut );
    //out   
    Mux8Way16(a=mainMemoryOut , b= mainMemoryOut,
     c= mainMemoryOut, d= mainMemoryOut,
      e=screenMemoryOut1, f= screenMemoryOut2,
       g=keyboardFinalOut, h=zero,
     sel=address[12..14] , out=out);


}