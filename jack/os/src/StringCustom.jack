// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack
/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class StringCustom {
    field Array content;
    field int len, maxLength;
    static Array intSymbols;
    function void init(){
        let intSymbols = Array.new(5);
        return;
    }
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor StringCustom new(int maxLength_){
        let len = 0;
        let maxLength = maxLength_;

        if (maxLength_ > 0){
            let content = Array.new(maxLength_);
        }
        return this;
    }

    /** Disposes this string. */
    method void dispose(){
        do content.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length(){
        return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j){
        if ((j < 0) | (j > (len - 1))){
            do Sys.error(15);
        }
        return content[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c){
        if ((j < 0) | (j > (len - 1))){
            do Sys.error(16);
        }

        let content[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c){
        if (len = maxLength){
            do Sys.error(17);
        }

        let content[len] = c;
        let len = len + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar(){
        if (len = 0){
            do Sys.error(18);
        }
        let len = len - 1;
        return;
    }
    method void setString(String s){
        var int i;
        let len = 0;
        let i = 0;
        while (i < s.length()){
            do appendChar(s.charAt(i));
            let i = i + 1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue(){
        var int res, i;
        var char c;
        let res = 0;
        if (charAt(0) = 45){
            let i = 1;
        } else {
            let i = 0;
        }
        while (i < len){
            let c = charAt(i);
            if ((c < 48) | (c > 57)){
                //invalind int conversion
                do Sys.error(21);
            }
            let res = res * 10 + (c - 48);
            let i = i + 1;
        }

        if (charAt(0) = 45){
            let res = -res;
        }
        return res;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val){
        var int j, symbolsCount;
        let len = 0;

        do Memory.poke(17000, -1);
        if (val < 0){
            do appendChar(45);
        }

        let j = Math.abs(val);
        while (j > 0){
            let intSymbols[symbolsCount] = j - (j / 10 * 10);
            let j = j / 10;
            let symbolsCount = symbolsCount + 1;
        }
        let j = symbolsCount - 1;

        while (j > -1){
            //48 is ascii 0
            do appendChar(intSymbols[j] + 48);
            let j = j - 1;
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine(){
        return 128;
    }

//    * new line = 128 = String.newline()
//      * backspace = 129 = String.backspace()
  
    /** Returns the backspace character. */
    function char backSpace(){
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote(){
        return 34;
    }
}
