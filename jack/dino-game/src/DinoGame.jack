class DinoGame {
	static DinoGame instance; 
	field Dino dino;
	field CactusQueue visibleCactuses, cactusPool;
	field IntQueue cactusesXs, cactusesTypes, cloudXs;
	field CloudQueue cloudsPool, visibleClouds;
	field Trail trail;
	field Pebbles pebbles;
	field boolean exit, waitForStart, dead, enableClouds; 
	field int timestep, dinoY, cactusCountOfScreen;
	static String visibleCactusesName, cactusesOutOfScreenName,cantSpawnCactusesMessage,cantSpawnCloudsMessage,startMessage, restartMessage, 
	blank, wrongCactusAddMessage,wrongCloudsAddMessage;

	constructor DinoGame new() {
		var int i, qSize, cloudsOfScreenCount, visibleCloudsCount;
		let qSize=10;
		let cantSpawnCactusesMessage="Can't spawn new cactuses";

		let cantSpawnCloudsMessage="Can't spawn new clouds";
		let startMessage=  "Press Up to start";
		let restartMessage="Press Up to restart";
		let cactusesOutOfScreenName="cactuses out of screen";
		let visibleCactusesName= "visible cactuses";
		let wrongCactusAddMessage="Something wrong with cactus add";
		let wrongCloudsAddMessage="Something wrong with clouds add";
		let blank =" ";
		let waitForStart=false;
		let enableClouds=false;
		
		do Cactus.init();
		let timestep = 1; 
		let dinoY= 150;
		let dead=true;
		let exit=false;

		let cactusCountOfScreen = 500;
		let cactusesTypes = IntQueue.new(cactusCountOfScreen);
		let cactusesXs = IntQueue.new(cactusCountOfScreen);
		let visibleCactuses=CactusQueue.new(qSize);
		let cactusPool=CactusQueue.new(qSize);

		let i=0;
		while(i<qSize){
			do cactusPool.add(Cactus.new(i, 1, -1,-1));
			let i=i+1;
		}
		if(enableClouds){
			let cloudsOfScreenCount=100;
			let visibleCloudsCount =5;
			let visibleClouds=CloudQueue.new(visibleCloudsCount);
			let cloudsPool=CloudQueue.new(visibleCloudsCount);
			let cloudXs = IntQueue.new(cloudsOfScreenCount);


			let i=0;
			while(i<visibleCloudsCount){
				do cloudsPool.add(Cloud.new(-1, 20, 1));
				let i=i+1;
			}
		}
		return this;
	}

	function DinoGame getInstance() {
		if(instance=null){
			let instance = DinoGame.new();
		}
		return instance;
	}

	method void dispose() {
		do cactusPool.dispose();
		do visibleCactuses.dispose();
		do cactusesXs.dispose();
		do cactusesTypes.dispose();
		do dino.dispose();
		do trail.dispose();
		do pebbles.dispose();
		do cloudsPool.dispose();
		do visibleClouds.dispose();
		do Memory.deAlloc(this);
		return;
	}

	method void run() {
		var Counter sceneX;
		var int  dinoH, i,  cactusEndY;
		var boolean collided, obstaclesSpeed, restarted; 
		let cactusEndY=dinoY-3+48;
		let sceneX=Counter.new();
		let dino = Dino.new(50,dinoY,-13,1);
		let trail = Trail.new(0,180); 
		let dinoH = dino.getH();
		let pebbles = Pebbles.new(0,dinoY+dinoH-1, obstaclesSpeed);

		do Output.moveCursor(11, 23);
		do Output.printString(startMessage);
		while(~exit){
			if((~(waitForStart)) | DinoGame.upKeyPressed()){
				let dead=false;
				let obstaclesSpeed=5;
				do sceneX.reset();
				do dino.hide();

				do visibleCactuses.hide();
				do visibleCactuses.move(cactusPool);
				if(enableClouds){
					do visibleClouds.hide();
					do visibleClouds.move(cloudsPool);
				}

				if(restarted){
					do DinoGame.hideString(restartMessage.length());
					}else{
						do DinoGame.hideString(startMessage.length());
					}

					do DinoGame.fillCactusesXs(cactusesXs);
					do DinoGame.fillCactusesTypes(cactusesTypes);
					do DinoGame.fillCloudsXs(cloudXs);
				}
				while (~dead) {
					if(MathCustom.mod(sceneX.get(),1000)=0){
						let obstaclesSpeed=obstaclesSpeed+2;
						do pebbles.setSpeed(obstaclesSpeed);
					}

					do DinoGame.addVisibleCactuses(cactusesXs, cactusesTypes, visibleCactuses, cactusPool, cactusEndY, obstaclesSpeed, sceneX.get());
					do visibleCactuses.update();
					do DinoGame.moveInvisibleCactuses(visibleCactuses, cactusPool);

					if(enableClouds){
						do DinoGame.addVisibleClouds(cloudXs, visibleClouds, cloudsPool, sceneX.get());
						do visibleClouds.update();
						do DinoGame.moveInvisibleClouds(visibleClouds, cloudsPool);
					}
					do trail.update();
					do pebbles.update();
					do dino.update();

					if(CollisionDetector.colided(dino, visibleCactuses)){
						let dead = true;
						let restarted=true;
						do dino.die();
						do Output.moveCursor(11, 23);
						do Output.printString(restartMessage);
					}

					do sceneX.add(obstaclesSpeed);
					do Sys.wait(timestep);
				}
				do Sys.wait(timestep);
			}
			return;
		}
		function void addVisibleCactuses(IntQueue cactusesXs, IntQueue cactusesTypes, CactusQueue visibleCactuses, CactusQueue cactusPool,
			int cactusEndY,int obstaclesSpeed, int sceneX){
			var Cactus cactus;
			var int cactusX,cactusType;
			let cactusX = cactusesXs.head();
			let cactusType = cactusesTypes.head();

			while(cactusesXs.size()>0 & ScreenCustom.visible(cactusX-sceneX, 0, Cactus.getWidth(cactusType), 0)){
				let cactus = cactusPool.remove();
				do cactus.setX(511-Cactus.getWidth(cactusType));
				do cactus.setY(cactusEndY-Cactus.getHeight(cactusType));
				do cactus.setSpeed(obstaclesSpeed);
				do cactus.setType(cactusType);

				do visibleCactuses.add(cactus);

				do cactusesXs.remove();
				do cactusesTypes.remove();
				let cactusX = cactusesXs.head();
				let cactusType = cactusesTypes.head();
			}
			return;
		}
		function void addVisibleClouds(IntQueue cloudXs, CloudQueue visibleClouds, CloudQueue cloudsPool, int sceneX){
			var int cloudX;
			var Cloud cloud;
			let cloudX = cloudXs.head();

			while(cloudXs.size()>0 & ScreenCustom.visible(cloudX-sceneX, 0, Cloud.getWidth(), 0)){
				let cloud = cloudsPool.remove();
				do cloud.setX(511-Cloud.getWidth());

				do visibleClouds.add(cloud);

				do cloudXs.remove();
				let cloudX = cloudXs.head();
			}
			return;
		}
		function void hideString(int messageLen){
			var int i;
			let i=0;
			while(i<messageLen){
				do Output.backSpace();
				let i=i+1;
			}
			do Output.printString(blank);
			return;
		}
		function boolean upKeyPressed(){
			var char key;
			let key = Keyboard.keyPressed();
			return key=131;
		}


		function void moveInvisibleCactuses(CactusQueue cactuses, CactusQueue cactusPool){
			var Cactus cactus;
			var int t;
			let cactus = cactuses.head();

			while(~(cactus=null)){
				if(~cactus.isVisible()){
					let t=cactuses.size();
					do cactusPool.add(cactuses.remove());
					do Assert.assertEq(t-1, cactuses.size(), wrongCloudsAddMessage);
					let cactus = cactuses.head();
					}else {
						let cactus=null;
					}
				}
				return;
			}	 


			function void moveInvisibleClouds(CloudQueue clouds, CloudQueue cloudsPool){
				var Cloud cloud;
				var int t;
				let cloud = clouds.head();

				while(~(cloud=null)){
					if(~cloud.isVisible()){
						let t=clouds.size();
						do cloudsPool.add(clouds.remove());
						do Assert.assertEq(t-1, clouds.size(), wrongCloudsAddMessage);
						let cloud = clouds.head();
						}else {
							let cloud=null;
						}
					}
					return;
				}	 

				function void fillCactusesXs(IntQueue cactuses){
					var int i,t,j,c,k;
					let i=1;
					let c=1;
					do cactuses.clear();
					do cactuses.add(500);
					while(i<cactuses.capacity()){
						let t = 500+Math.multiply(400,c);
						let k = MathCustom.mod(c,4)+1;
						if((k=3)|(k=4)){
							let j=i+3;
							while((i<cactuses.capacity())&(i<j)){
								do cactuses.add(t);
								let i=i+1;
								let t=t+20;
							}
							}else{	
								do cactuses.add(t);
								let i=i+1;

							}
							let c=c+1;
						}

						do Assert.assert(cactuses.size()>0 ,cantSpawnCactusesMessage);
						return;
					}

					function void fillCactusesTypes(IntQueue cactuses){
						var int i,type ,j, c;
						let i=1;
						let c=1;
						do cactuses.clear();
						do cactuses.add(1);
						while(i<cactuses.capacity()){
							let type = MathCustom.mod(c,4)+1;
							if((type=3)|(type=4)){
								let j=i+3;
								while((i<cactuses.capacity())&(i<j)){
									do cactuses.add(type);
									let i=i+1;
								}
								}else{
									do cactuses.add(type);
									let i=i+1;
								}
								let c=c+1;
							}

							do Assert.assert(cactuses.size()>0 ,cantSpawnCactusesMessage);
							return;
						}



						function void fillCloudsXs(IntQueue cloudXs){
							var int i;
							let i=0;
							do cloudXs.clear();
							while(i<cloudXs.capacity()){
								do cloudXs.add(100+Math.multiply(400,i));
								let i=i+1;
							}	

							do Assert.assert(cloudXs.size()>0 ,cantSpawnCloudsMessage);
							return;
						}
					}
